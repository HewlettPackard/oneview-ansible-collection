---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- debug: var=session

- name: Creates Network Interface if doesn't exist
  oneview_appliance_network_interfaces:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      macAddress: "{{mac_address}}"
      ipv4Type: "STATIC"
      ipv6Type: "UNCONFIGURE"
      hostname: "{{hostname}}"
      app1Ipv4Addr: "{{app1_ipv4_address}}"
      app2Ipv4Addr: "{{app2_ipv4_address}}"
      virtIpv4Addr: "{{ ipv4_address }}"
      ipv4Subnet: "{{ ipv4_subnet }}"
      ipv4Gateway: "{{ gateway }}"
      ipv4NameServers: 
         - "{{ dnsServer1 }}"
         - "{{ dnsServer2 }}"
  delegate_to: localhost
- debug: var=appliance_network_interfaces

- name: Do nothing when network interface exists
  oneview_appliance_network_interfaces:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      macAddress: "{{mac_address}}"
      ipv4Type: "STATIC"
      ipv6Type: "UNCONFIGURE"
      hostname: "{{hostname}}"
      app1Ipv4Addr: "{{app1_ipv4_address}}"
      app2Ipv4Addr: "{{app2_ipv4_address}}"
      virtIpv4Addr: "{{ ipv4_address }}"
      ipv4Subnet: "{{ ipv4_subnet }}"
      ipv4Gateway: "{{ gateway }}"
      ipv4NameServers: 
         - "{{ dnsServer1 }}"
         - "{{ dnsServer2 }}"
  delegate_to: localhost
- debug: var=appliance_network_interfaces

- name: Updates dns servers of the network interface
  oneview_appliance_network_interfaces:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    logout: true
    state: present
    data:
      macAddress: "{{mac_address}}"
      ipv4NameServers:
         - "{{ dnsServer1 }}"
         - "{{ dnsServer3 }}"
  delegate_to: localhost
- debug: var=appliance_network_interfaces