---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- name: Get currentVersion from URL
  oneview_version_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
  when: config_file.api_version == ""
  register: version

- name: Print currentVersion if an apiVersion is not specified in config file
  ansible.builtin.set_fact:
    currentVersion: "{{ version.ansible_facts.version.currentVersion|int }}"
  when: config_file.api_version == ""

- name: Print currentVersion if an apiVersion is specified in config file
  ansible.builtin.set_fact:
    currentVersion: contents.api_version | string
  when: config_file.api_version != ""

- name: Gather facts about all Server Profiles
  oneview_server_profile_facts:
    config: "{{ config }}"
  delegate_to: localhost

- ansible.builtin.debug:
    msg: "{{server_profiles | map(attribute='name') | list }}"
- ansible.builtin.debug:
    var: server_profiles


- name: Gather paginated, filtered and sorted facts about Server Profiles
  oneview_server_profile_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    params:
      start: 0
      count: 3
      sort: name:ascending
      filter: macType='Virtual'
  delegate_to: localhost

- ansible.builtin.debug:
    msg: "{{server_profiles | map(attribute='name') | list }}"


- name: Gather facts about a Server Profile by name
  oneview_server_profile_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    name: "{{contents.server_profile.server_profile_name}}"
  delegate_to: localhost

- ansible.builtin.debug:
    var: server_profiles

- name: Gather facts about a Server Profile by uri
  oneview_server_profile_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    uri: "{{server_profiles[0]['uri']}}"
  delegate_to: localhost
  when: server_profiles|length != 0

- ansible.builtin.debug:
    var: server_profiles

- name: Gather facts about all Server Hardware Types
  oneview_server_hardware_type_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost

- name: Gather facts about all Enclosure Groups
  oneview_enclosure_group_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost

- name: Gather facts about available servers and bays for a given enclosure group and server hardware type
  oneview_server_profile_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    options:
      - availableTargets:
          serverHardwareTypeUri: "{{server_hardware_types[0]['uri']}}"
          enclosureGroupUri: "{{enclosure_groups[0]['uri']}}"
  delegate_to: localhost

- ansible.builtin.debug:
    var: server_profile_available_targets

- name: Gather all facts about a Server Profile works below API Version 1200
  oneview_server_profile_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    name: "{{contents.server_profile.server_profile_name}}"
    options:
      - schema  # Supported only for API version <= 1200
      - newProfileTemplate # Supported only for API version <= 1200
      - availableServers # Supported only for API version <= 1200
  delegate_to: localhost
  when: currentVersion <= '1200'

- name: Gather all facts about a Server Profile
  oneview_server_profile_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    name: "{{contents.server_profile.server_profile_name}}"
    options:
      - compliancePreview
      - profilePorts:
        serverHardwareTypeUri: "{{server_hardware_types[0]['uri']}}"
        enclosureGroupUri: "{{enclosure_groups[0]['uri']}}"
      - transformation:
          serverHardwareTypeUri: "{{server_hardware_types[0]['uri']}}"
          enclosureGroupUri: "{{enclosure_groups[0]['uri']}}"
      - availableNetworks:
          serverHardwareTypeUri: "{{server_hardware_types[0]['uri']}}"
          enclosureGroupUri: "{{enclosure_groups[0]['uri']}}"
      - availableTargets
  delegate_to: localhost

- ansible.builtin.debug:
    var: server_profiles
- ansible.builtin.debug:
    var: server_profile_schema
- ansible.builtin.debug:
    var: server_profile_compliance_preview
- ansible.builtin.debug:
    var: server_profile_new_profile_template
- ansible.builtin.debug:
    var: server_profile_profile_ports
- ansible.builtin.debug:
    var: server_profile_messages
- ansible.builtin.debug:
    var: server_profile_transformation
- ansible.builtin.debug:
    var: server_profile_available_networks
- ansible.builtin.debug:
    var: server_profile_available_servers
- ansible.builtin.debug:
    var: server_profile_available_storage_system
- ansible.builtin.debug:
    var: server_profile_available_storage_systems
- ansible.builtin.debug:
    var: server_profile_available_targets

- name: Logout Session
  oneview_logout_session:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
