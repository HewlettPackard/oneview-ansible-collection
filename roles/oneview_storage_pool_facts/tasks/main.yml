---
- name: Get currentVersion from URL
  oneview_version_facts:
    config: "{{ config }}"
  delegate_to: localhost
  when: config_file.api_version == ""
  register: version

- name: Print currentVersion if an apiVersion is not specified in config file
  ansible.builtin.set_fact:
    currentVersion: "{{ version.ansible_facts.version.currentVersion|int }}"
  when: config_file.api_version == ""

- name: Print currentVersion if an apiVersion is specified in config file
  ansible.builtin.set_fact:
    currentVersion: contents.api_version | string
  when: config_file.api_version != ""

- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- ansible.builtin.debug:
    var: session

- name: Gather facts about all Storage Pools
  oneview_storage_pool_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
- ansible.builtin.debug:
    var: storage_pools

- name: Gather paginated, filtered and sorted facts about Storage Pools
  oneview_storage_pool_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    params:
      start: 0
      count: 3
      sort: 'name:descending'
      filter: status='OK'

- ansible.builtin.debug:
    var: storage_pools

- name: Gather facts about a Storage Pool by name
  oneview_storage_pool_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    name: "{{ contents.storage_pool.storage_pool_name }}"
  delegate_to: localhost

- name: Gather facts about a Storage System by name
  oneview_storage_system_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    name: "{{ contents.storage_system.storage_system_name }}"
  delegate_to: localhost

- ansible.builtin.debug:
    var: storage_systems

# To manage/unmanage a storage pool, issue a PUT with the isManaged attribute set as true to manage or false to unmanage.
- name: Ensure the Storage Pool '{{ contents.storage_pool.storage_pool_name }}' is not managed
  oneview_storage_pool:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      storageSystemUri: "{{ storage_systems[0]['uri'] }}"
      name: '{{ contents.storage_pool.storage_pool_name }}'
      isManaged: false
  delegate_to: localhost
  when: (storage_systems is not none or storage_systems is not undefined)

- name: Ensure the Storage Pool '{{ contents.storage_pool.storage_pool_name }}' is managed
  oneview_storage_pool:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      storageSystemUri: "{{ storage_systems[0]['uri'] }}"
      name: '{{ contents.storage_pool.storage_pool_name }}'
      isManaged: true
  delegate_to: localhost
  when: (storage_systems is not none and storage_systems is not undefined)

- name: Logout Session
  oneview_logout_session:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
