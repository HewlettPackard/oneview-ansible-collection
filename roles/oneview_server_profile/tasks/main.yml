---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- name: Gather facts about all Scopes
  oneview_scope_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost

- name: Create a Server Profile from a Server Profile Template
  oneview_server_profile:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      serverProfileTemplateName: "{{ contents.server_profile.ov_template }}"
      name: "{{ contents.server_profile.inventory_hostname }}"
      description: "{{ contents.server_profile.server_profile_description }}"
      # User should set initialScopeUris in case of scoped user
      # Otherwise collects scopeUris from OV when its not given
      # explicitly
      initialScopeUris:
        - "{{ scopes[0].uri }}"
    params: # Supported only in API version >= 600
      force: true
  delegate_to: localhost
  register: result

- ansible.builtin.debug:
    msg: "{{ result.msg }}"
- ansible.builtin.debug:
    var: server_profile
- ansible.builtin.debug:
    var: serial_number
- ansible.builtin.debug:
    var: server_hardware
- ansible.builtin.debug:
    var: compliance_preview
- ansible.builtin.debug:
    var: created

- name: Power Off the server hardware
  oneview_server_hardware:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: power_state_set
    data:
      name: "{{ contents.server_profile.server_hardware_name }}"
      powerStateData:
        powerState: "Off"
        powerControl: "MomentaryPress"
  delegate_to: localhost

- name: Create a server profile with iLO/Bios configuration
  oneview_server_profile:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}-2"
      serverHardwareTypeName: "{{ contents.server_profile.server_hardware_type_name }}"
      enclosureGroupName: "{{ contents.server_profile.enclosure_group_name }}"
      description: "{{ contents.server_profile.server_profile_description }}"
      bios:
        manageBios: true
        overriddenSettings: []
      managementProcessor:
        manageMp: true
        mpSettings:
          - settingType: "LocalAccounts"
            args:
              localAccounts:
                - userName: "user1"
                  displayName: "One"
                  password: "asdfghjkl"
                  iLOConfigPriv: false
                  userConfigPriv: false
                  remoteConsolePriv: false
                  virtualMediaPriv: true
                  virtualPowerAndResetPriv: false
  delegate_to: localhost

- name: Update server profile with local storage configuration
  oneview_server_profile:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}-2"
      serverHardwareTypeName: "{{ contents.server_profile.server_hardware_type_name }}"
      enclosureGroupName: "{{ contents.server_profile.enclosure_group_name }}"
      description: "{{ contents.server_profile.server_profile_description }}"
      localStorage:
        controllers:
          - deviceSlot: "Embedded"
            driveWriteCache: "Unmanaged"
            importConfiguration: false
            mode: "RAID"
            initialize: true
            logicalDrives:
              - accelerator: "Unmanaged"
                bootable: false
                driveTechnology: null
                name: "logicaldrive1"
                numPhysicalDrives: 2
                raidLevel: "RAID1"
                readCachePolicy: "Unmanaged"
                sasLogicalJBODId: null
                writeCachePolicy: "Unmanaged"
        sasLogicalJBODs: []
  delegate_to: localhost

- name: Create a Server Profile with connections
  oneview_server_profile:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}-with-connections"
      serverHardwareTypeName: "{{ contents.server_profile.server_hardware_type_name }}"
      enclosureGroupName: "{{ contents.server_profile.enclosure_group_name }}"
      connectionSettings:  # Supported only in API version >= 600.
        connections:
          - id: 1
            name: connection1
            functionType: Ethernet
            portId: Auto
            requestedMbps: 2000
            networkName: "{{ contents.server_profile.network_name }}"
  delegate_to: localhost

- ansible.builtin.debug:
    msg: server_profile

- name: Update Server Profile with boot configuration
  oneview_server_profile:
    config: "{{ config }}"
    state: "present"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}"
      # affinity: "BayAndServer"
      bootMode:
        manageMode: true
        mode: "UEFI"
        pxeBootPolicy: "Auto"
      boot:
        manageBoot: true
        order: ["HardDisk"]
  delegate_to: localhost
  register: result

# - name: Gather facts about a Storage Pool by name
#   oneview_storage_pool_facts:
#     config: "{{ config }}"
#     sessionID: "{{ session.ansible_facts.session }}"
#     name: "{{ contents.storage_pool.storage_pool_name }}"
#   delegate_to: localhost

# - debug: var=storage_pools

# - name: Gather facts about all Storage Volume Templates
#   oneview_storage_volume_template_facts:
#     config: "{{ config }}"
#     sessionID: "{{ session.ansible_facts.session }}"
#     params:
#       filter: isRoot='true'
#   delegate_to: localhost

# - debug: var=storage_volume_templates

# - name: Create a server profile with San Storage Attachments
#   oneview_server_profile:
#     config: "{{ config }}"
#     state: present
#     sessionID: "{{ session.ansible_facts.session }}"
#     data:
#       name: "{{ contents.server_profile.inventory_hostname }}-SanStorage"
#       serverHardwareTypeName: "{{ contents.server_profile.server_hardware_type_name }}"
#       enclosureGroupName: "{{ contents.server_profile.enclosure_group_name }}"
#       serialNumberType: "Virtual"
#       macType: "Virtual"
#       wwnType: "Virtual"
#       description: ""
#       affinity: "Bay"
#       connectionSettings:
#         connections:
#           - id: 1
#             name: "FC_Network"
#             functionType: "FibreChannel"
#             portId: "Mezz 2:1"
#             networkName: "{{ contents.server_profile.fc_network_name }}"
#       boot:
#         manageBoot: true
#         order:
#           - "HardDisk"
#       bootMode:
#         manageMode: true
#         mode: "UEFIOptimized"
#         secureBoot: "Unmanaged"
#         pxeBootPolicy: "Auto"
#       firmware:
#         manageFirmware: false
#         firmwareBaselineUri: ""
#         sdFlexIoFwBaselineUri: ""
#         forceInstallFirmware: false
#         firmwareInstallType: null
#         firmwareActivationType: "Immediate"
#       bios:
#         manageBios: false
#         overriddenSettings: []
#       managementProcessor:
#         manageMp: false
#         mpSettings: []
#       hideUnusedFlexNics: true
#       iscsiInitiatorNameType: "AutoGenerated"
#       localStorage:
#         sasLogicalJBODs: []
#         controllers: []
#       sanStorage:
#         hostOSType: "Windows Server 2019"
#         manageSanStorage: true
#         volumeAttachments:
#           - id: 1
#             volumeUri: null
#             lunType: "Auto"
#             lun: null
#             bootVolumePriority: "NotBootable"
#             storagePaths:
#               - isEnabled: true
#                 connectionId: 1
#                 targetSelector: "Auto"
#                 targets: []
#                 networkName: "ovsdk_fc_nw"
#                 # networkUri: "/rest/fc-networks/cb66e8b9-4915-4918-8f3b-5ca45b826ace"
#             isPermanent: true
#             volume:
#               properties:
#                 name: "new_vol_spt_nw1"
#                 description: ""
#                 storagePool: "{{ storage_pools[0].uri }}"
#                 size: 268435456
#                 provisioningType: "Thin"
#                 isShareable: false
#                 templateVersion: "1.1"
#                 snapshotPool: "{{ storage_pools[0].uri }}"
#                 isDeduplicated: false
#               templateUri: "{{ storage_volume_templates[0].uri }}"
#               initialScopeUris: null
#         sanSystemCredentials: []
#       osDeploymentSettings: null
#       initialScopeUris: []
#   delegate_to: localhost

- name: Rename Server Profile
  oneview_server_profile:
    config: "{{ config }}"
    state: "present"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      newName: "{{ contents.server_profile.inventory_hostname }}-updated"
      name: "{{ contents.server_profile.inventory_hostname }}"
  delegate_to: localhost
  register: result

- ansible.builtin.debug:
    msg: result.msg

- ansible.builtin.debug:
    var: server_profile

- name: Remediate compliance issues
  oneview_server_profile:
    config: "{{ config }}"
    state: "compliant"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}-updated"
  delegate_to: localhost
  register: result

- ansible.builtin.debug:
    msg: result.msg

- name: Delete the Server Profile created from a Server Profile Template
  oneview_server_profile:
    config: "{{ config }}"
    state: "absent"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}-updated"
  delegate_to: localhost
  register: result

- ansible.builtin.debug:
    msg: result.msg

- name: Delete the Server Profile created with connections
  oneview_server_profile:
    config: "{{ config }}"
    state: "absent"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}-with-connections"
  delegate_to: localhost

- ansible.builtin.debug:
    msg: result.msg

- name: Create Server Profile without specifying a template
  oneview_server_profile:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}"
      serverHardwareTypeName: "{{ contents.server_profile.server_hardware_type_name }}"
      enclosureGroupName: "{{ contents.server_profile.enclosure_group_name }}"
      description: "{{ contents.server_profile.server_profile_description }}"
  delegate_to: localhost

- ansible.builtin.debug:
    var: server_profile

- name: Unassign Server Hardware from Server Profile
  oneview_server_profile:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    # This is required for unassigning a SH, or creating a SP and not auto-assigning a SH
    auto_assign_server_hardware: false
    data:
      name: "{{ contents.server_profile.inventory_hostname }}"
      # Specify a blank serverHardwareName or serverHardwareUri when auto_assign_server_hardware is False to unassign a SH
      serverHardwareName:
  delegate_to: localhost

- name: Delete the Server Profile
  oneview_server_profile:
    config: "{{ config }}"
    state: "absent"
    sessionID: "{{ session.ansible_facts.session }}"
    data:
      name: "{{ contents.server_profile.inventory_hostname }}"
  delegate_to: localhost
- ansible.builtin.debug:
    var: inventory_hostname

- name: Create a Server Profile from a Server Profile Template
  oneview_server_profile:
    config: "{{ config }}"
    data:
      serverProfileTemplateName: "{{ contents.server_profile.ov_template }}"
      name: "{{ contents.server_profile.inventory_hostname }}"
      description: "{{ contents.server_profile.server_profile_description }}"
      enclosureGroupName: "{{ contents.server_profile.enclosure_group_name }}"
      # User should set initialScopeUris in case of scoped user
      # Otherwise collects scopeUris from OV when its not given
      # explicitly
      initialScopeUris:
        - "{{ scopes[0].uri }}"
    params: # Supported only in API version >= 600
      force: true
  delegate_to: localhost
  register: result

- name: Logout Session
  oneview_logout_session:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
