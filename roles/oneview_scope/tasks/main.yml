---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- ansible.builtin.debug:
    var: session

- name: Get currentVersion from URL
  oneview_version_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
  when: config_file.api_version == ""
  register: version

- name: Print currentVersion if an apiVersion is not specified in config file
  ansible.builtin.set_fact:
    currentVersion: "{{ version.ansible_facts.version.currentVersion | int }}"
  when: config_file.api_version == ""

- name: Print currentVersion if api version is specified in config file
  ansible.builtin.set_fact:
    currentVersion: config_file.api_version | string
  when: config_file.api_version != ""

- name: Gather facts about all Ethernet Networks
  oneview_ethernet_network_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost

- ansible.builtin.debug:
    var: ethernet_networks

- name: Create a scope
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      name: "{{ contents.scope.scope_name }}"
      addedResourceUris:
        - "{{ ethernet_networks[0]['uri'] }}"
        - "{{ ethernet_networks[1]['uri'] }}"
      removedResourceUris:
        - "{{ ethernet_networks[2]['uri'] }}"
  delegate_to: localhost

- name: Create a scope when exists
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      name: "{{ contents.scope.scope_name }}"
      addedResourceUris:
        - "{{ ethernet_networks[0]['uri'] }}"
        - "{{ ethernet_networks[1]['uri'] }}"
      removedResourceUris:
        - "{{ ethernet_networks[2]['uri'] }}"
  delegate_to: localhost

- name: Update the scope name
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      name: "{{ contents.scope.scope_name }}"
      newName: "{{ contents.scope.scope_name }}_Renamed"
      addedResourceUris:
        - "{{ ethernet_networks[2]['uri'] }}"
      removedResourceUris:
        - "{{ ethernet_networks[1]['uri'] }}"
  delegate_to: localhost

# This method is available only for api versin 300 and is non-idempotent
- name: Update the scope resource assignments, adding a resource
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: resource_assignments_updated
    data:
      name: "{{ contents.scope.scope_name }}_Renamed"
      resourceAssignments:
        addedResourceUris: "{{ ethernet_networks[0]['uri'] }}"
  delegate_to: localhost
  when: currentVersion == '300'

# This method is available only for api versin 300 and is non-idempotent
- name: Update the scope resource assignments, removing two resources
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: resource_assignments_updated
    data:
      name: "{{ contents.scope.scope_name }}_Renamed"
      resourceAssignments:
        removedResourceUris:
          - "{{ ethernet_networks[0]['uri'] }}"
          - "{{ ethernet_networks[1]['uri'] }}"
  delegate_to: localhost
  when: currentVersion == '300'

- name: Delete the Scope
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: absent
    data:
      name: "{{ contents.scope.scope_name }}_Renamed"
  delegate_to: localhost

- name: Create a scope to ensure continuity for an automation script
  oneview_scope:
    config: '{{ config }}'
    sessionID: "{{ session.ansible_facts.session }}"
    state: present
    data:
      name: "{{ contents.scope.scope_name }}"
  delegate_to: localhost

- name: Logout Session
  oneview_logout_session:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
