---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- ansible.builtin.debug:
    var: session

- name: Refresh the drive enclosure
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: refreshed
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
      refreshState: 'RefreshPending'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Power Off the drive enclosure
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: power_off
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Do nothing when drive enclosure is already powered off
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: power_off
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Power On the drive enclosure
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: power_on
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Do nothing when drive enclosure is already powered on
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: power_on
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Set the UID state of the drive enclosure to On
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: uid_on
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Do nothing when UID state is already set to On
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: uid_on
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Set the UID state of the drive enclosure to Off
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: uid_off
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Do nothing when UID state is already set to Off
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: uid_off
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Request a hard reset of the drive enclosure
  oneview_drive_enclosure:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: hard_reset
    data:
      name: '{{ contents.drive_enclosure.drive_enclosure_name }}'
  when: contents.drive_enclosure.variant == 'Synergy'
  delegate_to: localhost
  register: result
- ansible.builtin.debug:
    var: result.msg
  when: contents.drive_enclosure.variant == 'Synergy'

- name: Logout Session
  oneview_logout_session:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
