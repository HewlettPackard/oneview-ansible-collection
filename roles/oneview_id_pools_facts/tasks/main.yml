---
- name: Fetch Session Id
  oneview_get_session_id:
    config: "{{ config }}"
    name: "Test_Session"
  delegate_to: localhost
  register: session

- ansible.builtin.debug:
    var: session

- name: Get schema of the id pools
  oneview_id_pools_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: schema
    data:
      description: 'ID pool schema'
  delegate_to: localhost

- name: Generates a random range
  oneview_id_pools_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: generate
    data:
      poolType: '{{ contents.id_pools.poolType }}'
  delegate_to: localhost

- name: Get the ID Pools type
  oneview_id_pools_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: get_pool_type
    data:
      poolType: '{{ contents.id_pools.poolType }}'
  delegate_to: localhost
- ansible.builtin.debug:
    var: id_pool

- name: Checks the range availability in the ID pool
  oneview_id_pools_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: check_range_availability
    data:
      poolType: '{{ contents.id_pools.poolType }}'
      idList: ["42:CE:78:00:00:00", "42:CE:78:8F:FF:FF"]
  delegate_to: localhost

- name: Validates the list of ID's from IPv4 Subnet
  oneview_id_pools_facts:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
    state: validate_id_pool
    data:
      poolType: 'ipv4'
      idList: ['172.18.9.11']
  delegate_to: localhost

- name: Logout Session
  oneview_logout_session:
    config: "{{ config }}"
    sessionID: "{{ session.ansible_facts.session }}"
  delegate_to: localhost
